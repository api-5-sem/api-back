name: Java CI with Maven

on:
  pull_request:
    branches: [ "main", "qas", "develop" ]
  schedule:
    - cron: '0 18 * * *'  

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start Docker services
        run: docker-compose up -d

      # Executa testes unitários na branch 'develop'
      - name: Run Unit Tests
        if: github.ref == 'refs/heads/develop'
        run: mvn test

      # Executa as migrations na qas e teste de carga com inserts SQL
      - name: Run migration
        if: github.ref == 'refs/heads/qas'
        run: mvn spring-boot:run


  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      # Executa build e push somente na branch 'main'
      - name: Build with Maven
        if: github.ref == 'refs/heads/main'
        run: mvn clean install

  docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker for Azure
        uses: Azure/docker-login@v1
        with:
          login-server: springapppixel.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker Image and Push to Azure
        if: github.ref == 'refs/heads/main'
        run: |
          docker build . -t springapppixel.azurecr.io/backend:${{ github.sha }}
          docker push springapppixel.azurecr.io/backend:${{ github.sha }}

  notifyTelegramSuccess:
    runs-on: ubuntu-latest
    needs: [build, test, docker]
    if: success()
    steps:
      - name: Send Telegram Notification (Success)
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: -4512389085
          token: 7965658930:AAH9K3d8Y2HD73FuMZ7Ys9RSjYfmfErd2zw
          message: |
            ✅ CI/CD Pipeline Status:
            - Event: ${{ github.event_name }}
            - Branch: ${{ github.ref_name }}
            - Status: Concluído com sucesso!

  notifyTelegramFailure:
    runs-on: ubuntu-latest
    needs: [build, test, docker]
    if: failure()
    steps:
      - name: Send Telegram Notification (Failure)
        uses: appleboy/telegram-action@v1.0.0
        with:
          to: -4512389085
          token: 7965658930:AAH9K3d8Y2HD73FuMZ7Ys9RSjYfmfErd2zw
          message: |
            ❌ CI/CD Pipeline Failed:
            - Event: ${{ github.event_name }}
            - Branch: ${{ github.ref_name }}
            - Status: Falha no pipeline. Verifique os logs para mais detalhes!

